/// Grid system
//
// Generate semantic grid columns with these mixins.

@mixin make-container($gutter: $grid-gutter-width) {
  width: 100%;
  min-height: inherit;
  margin-right: auto;
  margin-left: auto;
  padding-right: $gutter / 2;
  padding-left: $gutter / 2;
}

// For each breakpoint, define the layout gutter for container
@mixin make-container-with-layout-gutter($gutters: $layout-gutter-widths, $breakpoints: $grid-breakpoints) {
  @each $breakpoint, $layout-gutter-width in $gutters {
    @include media-breakpoint-up($breakpoint, $breakpoints) {
      @include make-container($layout-gutter-width);
    }
  }
}

// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {
  @each $breakpoint, $container-max-width in $max-widths {
    @include media-breakpoint-up($breakpoint, $breakpoints) {
      max-width: $container-max-width;
    }
  }
}

@mixin make-row($gutter: $grid-gutter-width) {
  display: flex;
  flex-wrap: wrap;
  margin-right: calc(-#{$gutter} / 2);
  margin-left: calc(-#{$gutter} / 2);
}

@mixin make-col-ready($gutter: $grid-gutter-width) {
  position: relative;
  // Prevent columns from becoming too narrow when at smaller grid tiers by
  // always setting `width: 100%;`. This works because we use `flex` values
  // later on to override this initial width.
  flex-basis: 0;
  flex-grow: 1;
  width: 100%;
  max-width: 100%;
  @if ($grid-gutter-width == 0) {
    margin-right: calc(#{$gutter} / 2);
    margin-left: calc(#{$gutter} / 2);
  } @else {
    padding-right: $gutter / 2;
    padding-left: $gutter / 2;
  }
}

@mixin make-col($size, $columns: $grid-columns, $gutter: 0px) {
  flex: 0 0 calc(#{percentage(($size / $columns))} - #{$gutter});
  // Add a `max-width` to ensure content within each column does not blow out
  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
  // do not appear to require this.
  max-width: calc(#{percentage(($size / $columns))} - #{$gutter});
  @if ($grid-gutter-width == 0) {
    margin-right: calc(#{$gutter} / 2);
    margin-left: calc(#{$gutter} / 2);
  }
}

@mixin make-col-fix($size, $gutter: 0px) {
  flex: 0 0 calc(#{$size} - #{$gutter});
  width: calc(#{$size} - #{$gutter});
  @if ($grid-gutter-width == 0) {
    margin-right: calc(#{$gutter} / 2);
    margin-left: calc(#{$gutter} / 2);
  }
}

@mixin make-col-offset($size, $columns: $grid-columns) {
  $num: calc(#{$size} / #{$columns});
  margin-left: if($num == 0, 0, percentage($num));
}
